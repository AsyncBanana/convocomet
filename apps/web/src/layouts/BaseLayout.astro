---
import '@unocss/reset/tailwind.css';
import Button from '../components/Button.svelte';
import UserIcon from '../components/UserIcon.svelte';
import { matchBlock } from '../modules/indexBlockList';
import '../stylesheets/fonts.css';
import '../stylesheets/theme.css';
import '../stylesheets/common.css';
interface Props {
	SEO?: Partial<{
		title: string;
		description: string;
		type?: 'website' | 'article';
		image?: {
			url: string;
			alt: string;
		};
		published?: string;
		updated?: string;
		author?: string;
	}>;
	Nav?: boolean;
	class?: string;
	outerClass?: string;
	trackEvent?: boolean;
}
const {
	SEO: {
		title = 'ConvoComet - Open source, privacy friendly commenting',
		description = 'ConvoComet is an open source commenting solution that offers a lightweight and privacy friendly alternative to Disqus',
		type = 'website',
		image = {
			url: 'https://byteofdev.com/ByteofDevFrame.png',
			alt: 'Image showing code and the ByteofDev logo'
		},
		published,
		updated,
		author
	} = {},
	Nav = true,
	trackEvent = true
} = Astro.props;
const { getSession } = Astro.locals;
let user;
if (Nav) {
	user = await getSession();
}
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<html lang="en-US" class={`h-full${Astro.props.outerClass ? ` ${Astro.props.outerClass}` : ''}`}>
	<head>
		<meta http-equiv="Accept-CH" content="DPR, Width" />
		<link rel="icon" type="image/svg+xml" sizes="any" href="/favicon.svg" />
		<meta charset="UTF-8" />
		<title>{title}</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta property="og:title" content={title} />
		<link rel="canonical" href={canonicalURL} />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:locale" content="en-US" />
		<meta property="og:image" content={image.url} />
		<meta property="og:image:alt" content={image.alt} />
		<meta property="og:type" content={type} />
		<meta property="og:site_name" content="ByteofDev" />
		<meta name="description" property="og:description" content={description} />
		<meta name="twitter:card" content="summary_large_image" />
		{
			trackEvent ? (
				<script type="module">
					import {trackEvent} from '/events.js'; trackEvent('pageview');
				</script>
			) : (
				''
			)
		}
		{matchBlock(canonicalURL) ? <meta name="robots" content="noindex" /> : ''}
		{published ? <meta property="article:published_time" content={published} /> : ''}
		{updated ? <meta property="article:modified_time" content={updated} /> : ''}
		{author ? <meta property="article:author" content={author} /> : ''}
	</head><body class="min-h-screen" data-session={user ? JSON.stringify(user) : ''}>
		{
			Nav && (
				<>
					<div id="drawer" />
					<nav class="flex h-18 items-center place-content-center flex-1 sticky top-0 bg-base-2 z-10">
						<Button
							href="/"
							type="borderless"
							icon="i-custom:logo dark:i-custom:logo-dark"
							class="font-display text-xl font-bold"
						>
							ConvoComet
						</Button>
						<Button type="borderless" class="font-display text-xl lt-md:hidden" href="/about">
							About
						</Button>
						<Button
							type="borderless"
							class="font-display text-xl lt-md:hidden"
							href="https://docs.convocomet.dev"
						>
							Docs
						</Button>
						<Button type="borderless" class="font-display text-xl lt-md:hidden" href="/pricing">
							Pricing
						</Button>
						<Button
							type="borderless"
							icon="i-material-symbols:menu-rounded"
							class="md:hidden"
							id="drawerOpen"
						/>
						{user ? (
							<UserIcon {user} client:visible />
						) : (
							<Button type="borderless" class="font-display text-xl lt-md:hidden" href="/signin">
								Sign in
							</Button>
						)}
					</nav>
				</>
			)
		}<main class={`${Nav ? `min-h-[calc(100vh-4rem)] ` : ''}${Astro.props.class || ''}`}>
			<slot />
		</main>{
			Nav && (
				<footer class="bg-base-3 p-6 relative bottom-0 self-end">
					<div class="i-custom:logo dark:i-custom:logo-dark h-12 w-12" />
					<div class="flex items-center gap-2">
						<div class="text-neutral-3 font-bold font-display">ConvoComet</div>
						<p class="text-neutral-3">contact@convocomet.dev</p>
					</div>
					<div class="text-neutral-3 text-sm">
						Copyleft - All Rights Reversed; Licensed under AGPL 3.0
					</div>
					<div class="text-neutral-3 underline text-sm">
						<a class="hover:text-neutral-4 block w-max py-2" href="/privacy">
							Privacy Policy
						</a>
						<a class="hover:text-neutral-4 block w-max py-2" href="/terms">
							Terms of service
						</a>
						<a
							class="hover:text-neutral-4 block w-max py-2"
							href="https://github.com/AsyncBanana/convocomet"
						>
							GitHub
						</a>
					</div>
				</footer>
			)
		}</body
	>
</html>
<script>
	document.addEventListener(
		'DOMContentLoaded',
		async () => {
			const toggleButton = document.querySelector('#drawerOpen');
			if (!toggleButton) return;
			const mdSizing = window.matchMedia('(max-width: 768px)');
			let DrawerInstance;
			mdSizing.addEventListener('change', async (e) => {
				if (e.matches) {
					if (!DrawerInstance) {
						const Drawer = (await import('../components/Drawer.svelte')).default;
						const session = document.body.getAttribute('data-session');
						DrawerInstance = new Drawer({
							target: document.body,
							props: {
								session: session ? JSON.parse(session) : undefined
							}
						});
						const toggleContent = toggleButton.querySelector('div');
						toggleButton.addEventListener('click', () => {
							const open = !DrawerInstance.open;
							DrawerInstance.$set({ open });
							if (open) {
								toggleContent.classList.remove('i-material-symbols:menu-rounded');
								toggleContent.classList.add('i-material-symbols:close-rounded');
							} else {
								toggleContent.classList.add('i-material-symbols:menu-rounded');
								toggleContent.classList.remove('i-material-symbols:close-rounded');
							}
						});
					}
				} else {
					if (DrawerInstance) {
						DrawerInstance.$set({ open: false });
					}
				}
			});
			mdSizing.dispatchEvent(
				new MediaQueryListEvent('change', {
					matches: mdSizing.matches
				})
			);
		},
		{ once: true }
	);
</script>
